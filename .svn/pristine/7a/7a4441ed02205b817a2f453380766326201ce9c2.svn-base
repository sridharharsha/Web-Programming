package csjobs.web.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import csjobs.model.Application;
import csjobs.model.Degree;
import csjobs.model.Job;
import csjobs.model.User;
import csjobs.model.dao.ApplicationDao;
import csjobs.model.dao.DegreeDao;
import csjobs.model.dao.JobDao;
import csjobs.model.dao.UserDao;
import csjobs.web.validator.UserValidator;

@Controller
public class UserController {
	
    @Autowired
    private UserDao userDao;
    
    @Autowired
    private JobDao jobDao;
    
    @Autowired
    private UserValidator userValidator;
    
    @Autowired
    private DegreeDao degreeDao;
    
    @Autowired
    private ApplicationDao applicationDao;

    @RequestMapping({"/index.html","/home.html"})
    public String home( ModelMap models){

    	models.put("jobs", jobDao.getPublishedJobs());
    	return "home";
    }
    
    @RequestMapping("/view.html")
    public String view( ModelMap models,@RequestParam Long id){
    	
    	models.put("jobDetails", jobDao.getJobById(id));
    	return "view";
    	
    }
    
    @RequestMapping(value = "/register.html", method = RequestMethod.GET)
    public String register( ModelMap models ){
    	models.put("user", new User());
    	return "register";
    }
    
    @RequestMapping(value = "/register.html", method = RequestMethod.POST)
    public String register( @ModelAttribute User user, BindingResult result ){
    		
    	userValidator.validate(user, result);
    	if(result.hasErrors()){
    		return "register";
    	}
    	user = userDao.saveUser(user);
       	return "redirect:home.html";
    	
    }
    
    @RequestMapping("/dashboard.html")
    public String dashboard( ModelMap models,@RequestParam String email){
    	
    	User user = userDao.findUserByEmail(email);
    	if(user != null){
    		if(user.isAdmin() == true){
    			models.put("user", user);
    			return "admin";
    		}else if(user.isReviewer() == true){
    			models.put("user", user);
    			return "reviewer";
    		}else{
    			
    			List<Application> applications = user.getApplications();
    			List<Job> publishedJobs = jobDao.getPublishedJobs();

    			if(applications != null && applications.size() > 0){
    				
    				models.put("jobsApplied", user.getApplications());
    				models.put("openJobs", jobDao.getOpenJobPositions(user.getId()));

    			}else{
    				models.put("openJobs", publishedJobs);
    			}
    			models.put("user", user);
    			return "applicant";
    		}
    	}
    	return "redirect:home.html";
    }
    
    @RequestMapping(value = "/dashboard.html",method = RequestMethod.POST)
    public String dashboard( ModelMap models,@RequestParam String email,@RequestParam String password ){

    	User user = userDao.findUserByEmail(email);
    	if(user != null && user.getPassword().equals(password)){
    		if(user.isAdmin() == true){
    			models.put("user", user);
    			return "admin";
    		}else if(user.isReviewer() == true){
    			models.put("user", user);
    			return "reviewer";
    		}else{
    			
    			List<Application> applications = user.getApplications();
    			List<Job> publishedJobs = jobDao.getPublishedJobs();

    			if(applications != null && applications.size() > 0){
    				
    				models.put("jobsApplied", user.getApplications());
    				models.put("openJobs", jobDao.getOpenJobPositions(user.getId()));

    			}else{
    				models.put("openJobs", publishedJobs);
    			}
    			models.put("user", user);
    			return "applicant";
    		}
    	}
    	models.put("invalid", Boolean.TRUE);
    	return "redirect:home.html";
    }

    @RequestMapping("/logout.html")
    public String logout( ModelMap models,HttpServletRequest request ){

//    	HttpSession session = request.getSession();
//    	session.invalidate();
        return "redirect:home.html";
    }
    
    @RequestMapping("/apply.html")
    public String apply( ModelMap models, @RequestParam Long userId, @RequestParam Long jobId){

    	models.put("user", userDao.getUser(userId));
    	models.put("jobApplying", jobDao.getJobById(jobId));
    	models.put("application", new Application());
    	return "apply";
    }
    
    @RequestMapping(value = "/apply.html", method = RequestMethod.POST)
    public String apply( @ModelAttribute Application application, @RequestParam Integer degreeCnt,HttpServletRequest request,@RequestParam Long userId,@RequestParam Long jobId){
    	
    	List<Degree> degrees = new ArrayList<Degree>();
    	for(int i=1; i<=degreeCnt; i++){

    		Degree degree = new Degree();
    		String degreeName = request.getParameter("saveDegName"+i);
    		String university = request.getParameter("saveUnivName"+i);
    		Integer year = Integer.parseInt(request.getParameter("saveYear"+i));
    		degree.setName(degreeName);
    		degree.setSchool(university);
    		degree.setYear(year);
    		degrees.add(degree);
    		
    	}
    	
    	User user = userDao.getUser(userId);
    	application.setDegrees(degrees);
    	application.setSubmitDate(new Date());
    	application.setApplicant(user);
    	application.setJob(jobDao.getJobById(jobId));
    	application = applicationDao.saveApplication(application);
    	
    	List<Application> applications = new ArrayList<Application>();
    	applications.add(application);
    	user.setApplications(applications);
    	
    	return "redirect:dashboard.html?email="+user.getEmail();
    }
    
    @RequestMapping("/application.html")
    public String application(ModelMap models, @RequestParam Long id, @RequestParam Long userId, @RequestParam Long jobId ){
    	
    	Application application = applicationDao.getApplication(id);
    	models.put("application", application);
    	models.put("user", userDao.getUser(userId));
    	models.put("job", jobDao.getJobById(jobId));
    	models.put("degrees", application.getDegrees());
    	return "application-info";
    }

}
